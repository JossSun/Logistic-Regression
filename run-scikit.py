from sklearn.linear_model import LogisticRegression
import numpy as np


#Load in train data
file = open("train.txt")
data = np.loadtxt(file)
X_train = data[:,1:] #load in colomn 1 and colomn 2
Y_train = data[:,0] # load in colomn 0 

#Load in test data
f = open("test.txt")
da = np.loadtxt(f)
X_test = da[:,1:] #load in colomn 1 and colomn 2

#Fit in the model
clf = LogisticRegression().fit(X_train,Y_train)
clf.predict(X_test)
'''will get result
array([ 0.001695,  0.001695,  0.001695,  0.001695,  0.001695,  0.001695,
        0.001695,  0.001695,  0.001695,  0.001695])
It is a classification result
'''

clf.coef_
''' will get result
array([[ -7.94707579e-01,  -8.70021145e-05],
       [ -7.94707585e-01,   7.43515208e-05],
       [ -7.94707579e-01,  -8.99901445e-05],
       [ -7.94894045e-01,  -1.00939550e-04],
       [ -7.93114465e-01,   1.04173728e-04],
       [ -7.93114456e-01,  -9.50275108e-05],
       [ -7.94894045e-01,  -8.69954030e-05],
       [ -7.94092084e-01,  -8.30402356e-05],
       [ -7.94894046e-01,  -3.12188208e-05],
       [ -5.14324630e-01,  -3.95596181e-05]])
a pair of coefficient for each sample
'''


clf2.predict_log_proba(X_test)
''' will get result
array([[-2.31170696, -2.31170688, -2.31170696, -2.31176683, -2.3111955 ,
        -2.3111956 , -2.31176682, -2.31150937, -2.3117668 , -2.22498375],
       [-2.31170694, -2.31170694, -2.31170694, -2.3117668 , -2.31119558,
        -2.31119557, -2.3117668 , -2.31150935, -2.3117668 , -2.22498375],
       [-2.31163025, -2.31163026, -2.31163025, -2.31168964, -2.31112296,
        -2.31112295, -2.31168964, -2.31143423, -2.31168964, -2.22560928],
       [-2.31163025, -2.31163026, -2.31163025, -2.31168964, -2.31112296,
        -2.31112295, -2.31168964, -2.31143423, -2.31168964, -2.22560928],
       [-2.31163828, -2.31163829, -2.31163828, -2.31169772, -2.31113056,
        -2.31113056, -2.31169772, -2.3114421 , -2.31169772, -2.22554376],
       [-2.31163025, -2.31163025, -2.31163025, -2.31168965, -2.31112295,
        -2.31112296, -2.31168965, -2.31143424, -2.31168964, -2.22560928],
       [-2.31163828, -2.31163829, -2.31163828, -2.31169772, -2.31113056,
        -2.31113056, -2.31169772, -2.3114421 , -2.31169772, -2.22554376],
       [-2.32553336, -2.32553337, -2.32553336, -2.32567489, -2.3243244 ,
        -2.3243244 , -2.32567489, -2.32506624, -2.32567489, -2.11878427],
       [-2.31163828, -2.31163829, -2.31163828, -2.31169772, -2.31113056,
        -2.31113056, -2.31169772, -2.3114421 , -2.31169772, -2.22554376],
       [-2.31163025, -2.31163025, -2.31163026, -2.31168965, -2.31112295,
        -2.31112296, -2.31168965, -2.31143424, -2.31168964, -2.22560928]])
prediction of probability, uncertain of the meaning 
'''

# Bayesian Regression
from sklearn import linear_model
clf2 = linear_model.BayesianRidge()
clf2.fit(X_train,Y_train)
clf2.predict(X_test)
''' will get result
array([ 0.00098657,  0.00090446,  0.00081487,  0.00075955,  0.00044767,
        0.0009525 ,  0.00062719,  0.00133242,  0.000814  ,  0.00095982])
Prediction of Y
'''

clf.ceof_
''' will get result
array([  1.58835994e-03,  -5.02730391e-07])
'''

